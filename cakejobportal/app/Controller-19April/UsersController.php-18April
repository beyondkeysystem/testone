<?php

App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');

/**
 * Users Controller
 *
 * @property User $User
 * @property AuthComponent $Auth
 */
class UsersController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Auth', 'Cookie');
    private $flux_cookie_name = '';
    private $flux_cookie_seed = '';
    private $flux_cookie_hash = '';
    var $uses = array('JobComment','User', 'ResetPassword','JobComment','JobCv','TransMember', 'EmployerDetail', 'EmployerProfile', 'JobCountry','JobJobseeker', 'JobCity','JobState','TransMemberMembershipScheme', 'TransMemberVideo');
    
    public function beforeFilter() {
		parent::beforeFilter();
		// FluxBB: Generate cookie and it's hash
		require_once('../webroot/forum/config.php');
		
		$this->flux_cookie_name = $cookie_name;
		$this->flux_cookie_seed = $cookie_seed;
		if(isset($this->data['User']['password']))
		    $this->flux_cookie_hash = sha1($this->data['User']['password']);
	    
		// Set Cookie component variables
		$this->Cookie->time = 1209600;
		$this->Cookie->domain = $cookie_domain;
		$this->Cookie->path = $cookie_path;
		$this->Cookie->secure = $cookie_secure;
		$this->Cookie->key = null;
		// load Models
		$this->Auth->allow('loadata','upload_resume','save_comment');
    }
    // end of authentication
	
    /**
     * index method
     * @return void
     */
    public function index() {
        $this->User->recursive = 0;
        $this->set('users', $this->paginate());
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * login method
     * @return void
     */
    public function login() {
        // set redirect to home page according logged in user
        $login_user = $this->Auth->user();
        if (!empty($login_user)) {
            if ($login_user['type'] == 'admin') {
                $this->redirect(array('controller' => 'admin', 'action' => 'index'));
            }
            if ($login_user['type'] == 'candidate') {
                $this->redirect(array('controller' => 'candidate', 'action' => 'candidate_profile'));
            }
            if ($login_user['type'] == 'employer') {
                $this->redirect(array('controller' => 'employer', 'action' => 'profile'));
            }
        }
        // end of redirect
        if ($this->request->is('post')) {
            $this->Auth->authenticate['Form'] = array('fields' => array('username' => 'email'));
            if ($this->Auth->login()) {
                $auth_data = $this->Auth->user();
                if (isset($auth_data) && !empty($auth_data)) {
		    $this->User->query("DELETE FROM `fluxbb2_online` WHERE ident='" . $_SERVER['REMOTE_ADDR'] . "'");
	    
		    $flux_uid = $this->User->find('first', array(
			'fields' => 'FluxUser.id',
			'joins' => array(
			    array(
				'type' => 'INNER',
				'table' => 'fluxbb2_users',
				'alias' => 'FluxUser',
				'conditions' => 'FluxUser.email = User.email'
			    )
			),
			'conditions' => array(
			    'User.id' => $this->Auth->user('id')
			)
		    ));
		    if($flux_uid){
$key=$this->flux_cookie_seed.'_password_hash';
$data=$this->flux_cookie_hash;
if (strlen($key) > 64)
$key = pack('H*', sha1($key)); // we have to use raw output here to match the standard

// Ensure we're padded to exactly one block boundary
$key = str_pad($key, 64, chr(0x00));

$hmac_opad = str_repeat(chr(0x5C), 64);
$hmac_ipad = str_repeat(chr(0x36), 64);

// Do inner and outer padding
for ($i = 0;$i < 64;$i++) {
$hmac_opad[$i] = $hmac_opad[$i] ^ $key[$i];
$hmac_ipad[$i] = $hmac_ipad[$i] ^ $key[$i];
}

// Finally, calculate the HMAC
$hash = sha1($hmac_opad.pack('H*', sha1($hmac_ipad.$data)));

$time=time() + 1209600;

/////////////////////////////////////////////
$now = time();
$expire = $now + 31536000;
$key=$this->flux_cookie_seed.'_cookie_hash';
$data=$flux_uid['FluxUser']['id'].'|'.$expire;

if (strlen($key) > 64)
$key = pack('H*', sha1($key)); // we have to use raw output here to match the standard

// Ensure we're padded to exactly one block boundary
$key = str_pad($key, 64, chr(0x00));

$hmac_opad = str_repeat(chr(0x5C), 64);
$hmac_ipad = str_repeat(chr(0x36), 64);

// Do inner and outer padding
for ($i = 0;$i < 64;$i++) {
$hmac_opad[$i] = $hmac_opad[$i] ^ $key[$i];
$hmac_ipad[$i] = $hmac_ipad[$i] ^ $key[$i];
}

// Finally, calculate the HMAC
$flux_cookie_hash = sha1($hmac_opad.pack('H*', sha1($hmac_ipad.$data)));
$r = $flux_uid['FluxUser']['id']."|".$hash."|".$expire."|".$flux_cookie_hash;


	        $this->Cookie->write(// 3|253855235fd9a76d0b2b0aa625ee7fe7ef318e8e|1397203077|8cf3c24a2119c77687883c348cf3d964e06a2ccb
			$this->flux_cookie_name,$r,
			//serialize(array(
			    //$flux_uid['FluxUser']['id'],
			    //md5($this->flux_cookie_seed . $this->flux_cookie_hash),
			    //time() + 1209600,
			    //$this->flux_cookie_hash			
			//)),
			false
		    );
		    
		    }
		    /*pr($flux_uid);
		    pr($this->Cookie);
		    exit;*/
                    if($auth_data['first_login'] == 0)
		    {
			if ($auth_data['type'] == 'candidate') {
			    $this->redirect(array('controller' => 'candidate', 'action' => 'candidate_edit'));
			}
			if ($auth_data['type'] == 'employer') {
			    $this->redirect(array('controller' => 'employer', 'action' => 'profile_edit/'.$auth_data['id']));
			}
		    }
		    else
		    {
                        if ($auth_data['type'] == 'candidate') {
                            $this->redirect(array('controller' => 'candidate', 'action' => 'candidate_profile'));
                        }
                        if ($auth_data['type'] == 'employer') {
                            $this->redirect(array('controller' => 'employer', 'action' => 'profile/'.$auth_data['name']));
                        }
                        if ($auth_data['type'] == 'admin') {
                            $this->redirect(array('controller' => 'admin', 'action' => 'index'));
                        }
                    }
                }
            } else {
                $this->Session->setFlash(__('Invalid email or password, try again'));
            }
            $this->set("email", $this->data['User']['email']);
        }
    }

////////////////////////////////////////////////////////////////////////////////

function utf8_ltrim( $str, $charlist=false)
{
	if($charlist === false)
		return ltrim($str);

	// Quote charlist for use in a characterclass
	$charlist = preg_replace('!([\\\\\\-\\]\\[/^])!', '\\\${1}', $charlist);

	return preg_replace('/^['.$charlist.']+/u', '', $str);
}

/**
* UTF-8 aware replacement for rtrim()
* Note: you only need to use this if you are supplying the charlist
* optional arg and it contains UTF-8 characters. Otherwise rtrim will
* work normally on a UTF-8 string
* @author Andreas Gohr <andi@splitbrain.org>
* @see http://www.php.net/rtrim
* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php
* @return string
* @package utf8
* @subpackage strings
*/
function utf8_rtrim($str, $charlist=false)
{
	if($charlist === false)
		return rtrim($str);

	// Quote charlist for use in a characterclass
	$charlist = preg_replace('!([\\\\\\-\\]\\[/^])!', '\\\${1}', $charlist);

	return preg_replace('/['.$charlist.']+$/u', '', $str);
}

//---------------------------------------------------------------
/**
* UTF-8 aware replacement for trim()
* Note: you only need to use this if you are supplying the charlist
* optional arg and it contains UTF-8 characters. Otherwise trim will
* work normally on a UTF-8 string
* @author Andreas Gohr <andi@splitbrain.org>
* @see http://www.php.net/trim
* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php
* @return string
* @package utf8
* @subpackage strings
*/
function utf8_trim( $str, $charlist=false)
{
	if($charlist === false)
		return trim($str);

	return utf8_ltrim(utf8_rtrim($str, $charlist), $charlist);
}
    /**
     * logout method
     * @return void
     */
    public function logout() {
	$flux_uid = $this->User->find('first', array(
			'fields' => 'FluxUser.id',
			'joins' => array(
			    array(
				'type' => 'INNER',
				'table' => 'fluxbb2_users',
				'alias' => 'FluxUser',
				'conditions' => 'FluxUser.email = User.email'
			    )
			),
			'conditions' => array(
			    'User.id' => $this->Auth->user('id')
			)
		    ));
        $this->User->query('DELETE FROM fluxbb2_online WHERE user_id='.$flux_uid['FluxUser']['id']);
	if (isset($_SERVER['HTTP_COOKIE'])) {
	    $cookies = explode(';', $_SERVER['HTTP_COOKIE']);
	    foreach($cookies as $cookie) {
		$parts = explode('=', $cookie);
		$name = trim($parts[0]);
		setcookie($name, '', time()-1000);
		setcookie($name, '', time()-1000, '/');
	    }
	}
	$this->Auth->logout();	
        $this->redirect(array('controller' => 'home', 'action' => 'index'));
    }

    /**
     * view method
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
////////////////////////////////////////////////////////////////////////////////

    public function view($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
        $this->set('user', $this->User->find('first', $options));
    }

    

    
////////////////////////////////////////////////////////////////////////////////

    /**
     * signup method
     * @return void
     */
    public function signup() {
	
           //set user type for default view
            $this->set('page','signup');
        
           //set selected action detail
            $this->set('action_detail', 'USER REGISTRATION');
            
	    if(isset($_POST['can_country']))
	    { 
		$can_country = $_POST['can_country'];
	    }
	    else{
		$can_country = '';
	    }
	    $country = $this->JobCountry->fill_dropdown_country('can_country','job_country', 'country_name', "country_id", $can_country, "Country","","onchange=regionText(); ","order_id, country_id");
	    $this->set('country' , $country);
	    
	    $empcountry = $this->JobCountry->fill_dropdown_country('emp_country','job_country', 'country_name', "country_id", $can_country, "Country","","onchange=regionText(); ","order_id, country_id");
	    $this->set('emp_country' , $empcountry);
		
	    
        if ($this->request->is('post')) {
	    
	     $dob = '';
             $can_fname =   $_POST['can_fname']; 
             $can_lname =   $_POST['can_lname'];
             
             $can_bod_date =   $_POST['can_bod_date']; 
             $can_bod_month =    $_POST['can_bod_month']; 
             $can_bod_year =   $_POST['can_bod_year']; 
             $dob = trim($can_bod_year.'-'.$can_bod_month.'-'.$can_bod_date);
             $can_email =   trim($_POST['can_email']); 
             $can_city =   $_POST['can_city'];
	     $can_state =   $_POST['can_state'];
             $can_country =   $_POST['can_country']; 
             $can_uname =    trim($_POST['can_uname']); 
             $can_password =  $_POST['can_password'];
             //$can_password = AuthComponent::password($can_password);
             
             
             $created_date =    $_POST['created_date'];
             
             
             $emp_company_name =   $_POST['emp_company_name']; 
             $emp_email =   trim($_POST['emp_email']); 
             $emp_address =   $_POST['emp_address']; 
             $emp_city =   $_POST['emp_city'];
	     $emp_state =   $_POST['emp_state'];
             $emp_country =   $_POST['emp_country']; 
             $emp_name =   trim($_POST['emp_name']);
             $emp_password =   $_POST['emp_password'];
             //$emp_password = AuthComponent::password($emp_password);
             $emp_confirm =   $_POST['emp_confirm']; 
        if(isset($emp_company_name) AND $emp_company_name !='' )
        {
            $arr['User'] = array('name' => $emp_name , 'email' => $emp_email , 'type' => 'employer' , 'address' =>  $emp_address,
            'password' => $emp_password,'company_name'=> $emp_company_name,'office_address'=> $emp_address,'city'=> $emp_city, 'state' => $emp_state, 'country' => $emp_country);
            //pr($arr);
            //die;
        $this->User->create();
        $query = $this->User->save($arr['User']);
	
	// Forum accessing 3 is Guest and 4 is member, 1 is admin and 2 is moderator
	$pun_config = array();
	$now = time();
	require_once('../webroot/forum/cache/cache_config.php');
	$this->User->query("
	    INSERT INTO `fluxbb2_users` (
		`username`, `group_id`, `password`, `email`,
		`email_setting`, `timezone`, `dst`, `language`,
		`style`, `registered`, `registration_ip`, `last_visit`
	    )
	    VALUES(
		'" . mysql_escape_string(
		    $emp_name
		) . "', " .
		4 . ", '" .
		sha1($emp_password) . "', '" .
		mysql_escape_string($emp_email) . "', " .
		$pun_config['o_default_email_setting'] .
		", 0, 0, '" . $pun_config['o_default_lang'] . "', '" .
		$pun_config['o_default_style'] . "', " . $now . ", '" .
		$_SERVER['REMOTE_ADDR'] . "', " . $now . "
	    )"
	);
	
	$lid = $this->User->getLastInsertID();
	$user_id  = $lid;
	$unique_id = $user_id;
	
	$arr_job['TransMember'] = array('user_id'=> $user_id,'unique_id'=>$unique_id,'email'=>$emp_email);
	$this->TransMember->create();
	$query = $this->TransMember->save($arr_job['TransMember']);
	
	$arr_job['TransMemberVideo'] = array('member_id'=> $unique_id);
	$this->TransMemberVideo->create();
	$query = $this->TransMemberVideo->save($arr_job['TransMemberVideo']);
	
	$arr_job['TransMemberMembershipScheme'] = array('member_id'=> $unique_id,'is_payment_complete' => $unique_id);
	$this->TransMemberMembershipScheme->create();
	$query = $this->TransMemberMembershipScheme->save($arr_job['TransMemberMembershipScheme']);
	
        if ($query) {
            //die('pASS');
                 $this->Session->setFlash(__('The user has been saved'));
		
		$cakeEmail = new CakeEmail('default');
		$cakeEmail->template('registration', 'default')->emailFormat('html')->to($emp_email)->subject('Recruit Youngs - Registered Successfully');					
		$result['date']=date("d/m/Y");
		$result["flag"]=0;
		$cakeEmail->viewVars(array('user' =>$arr));
		//pr($this->Session->read('tempOwner')); exit;
		if($cakeEmail->send()) {
			$this->Session->setFlash(__('Congratulations you have successfully registered.'));
			$this->redirect(array('action' => 'index'));
		} else {
			$this->Session->setFlash(__('Problem on sending email to ' . $emp_email . '. please contact administrator'), 'flash/error');
			$this->redirect(array('controller'=>'admins','action' => 'logout'));
		}
		
                $this->redirect(array('action' => 'index'));
            } else {
                //die('fail');
                 $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
        }
        else
        {
	    //exit("Success");
	    if($can_email != ''){
              $arr1['User'] = array('name' => $can_uname , 'email' => $can_email , 'type' => 'candidate' ,
            'password' => $can_password,'city'=> $can_city, 'state'=> $can_state, 'country' => $can_country, 'first_name' => $can_fname , 'last_name'=> $can_lname, 'dob' => $dob);
             $this->User->create();
        $query = $this->User->save($arr1['User']);
	
	$lid = $this->User->getLastInsertID();
	
	$arr_job['JobJobseeker'] = array('seeker_id'=> $lid,'seeker_name'=>$can_uname,'seeker_email'=>$can_email,'seeker_city'=>$can_city,'seeker_state'=>$can_state,'seeker_country'=>$can_country);
	$this->JobJobseeker->create();
	$query = $this->JobJobseeker->save($arr_job['JobJobseeker']);
	
	// Forum accessing 3 is Guest and 4 is member, 1 is admin and 2 is moderator
	$pun_config = array();
	$now = time();
	require_once('../webroot/forum/cache/cache_config.php');
	$this->User->query("
	    INSERT INTO `fluxbb2_users` (
		`username`, `group_id`, `password`, `email`,
		`email_setting`, `timezone`, `dst`, `language`,
		`style`, `registered`, `registration_ip`, `last_visit`
	    )
	    VALUES(
		'" . mysql_escape_string(
		    $can_uname
		) . "', " .
		4 . ", '" .
		sha1($can_password) . "', '" .
		mysql_escape_string($can_email) . "', " .
		$pun_config['o_default_email_setting'] .
		", 0, 0, '" . $pun_config['o_default_lang'] . "', '" .
		$pun_config['o_default_style'] . "', " . $now . ", '" .
		$_SERVER['REMOTE_ADDR'] . "', " . $now . "
	    )"
	);
	
	
	
	$user_id  = $lid;
	$unique_id = $user_id;
	
	$arr_job['TransMember'] = array('user_id'=> $user_id,'unique_id'=>$unique_id,'email'=>$can_email);
	$this->TransMember->create();
	$query = $this->TransMember->save($arr_job['TransMember']);
	
	$arr_job['TransMemberVideo'] = array('member_id'=> $unique_id);
	$this->TransMemberVideo->create();
	$query = $this->TransMemberVideo->save($arr_job['TransMemberVideo']);
	
	$arr_job['TransMemberMembershipScheme'] = array('member_id'=> $unique_id,'is_payment_complete' => $unique_id);
	$this->TransMemberMembershipScheme->create();
	$query = $this->TransMemberMembershipScheme->save($arr_job['TransMemberMembershipScheme']);
	
        if ($query) {
                $cakeEmail = new CakeEmail('default');
		$cakeEmail->template('registration', 'default')->emailFormat('html')->to($can_email)->subject('Recruit Youngs - Registered Successfully');					
		$result['date']=date("d/m/Y");
		$result["flag"]=0;
		$cakeEmail->viewVars(array('user' =>$arr1));
		//pr($this->Session->read('tempOwner')); exit;
		if($cakeEmail->send()) {
			$this->Session->setFlash(__('Congratulations you have successfully registered.'));
			$this->redirect(array('action' => 'index'));
		} else {
			$this->Session->setFlash(__('Problem on sending email to ' . $can_email . '. please contact administrator'), 'flash/error');
			$this->redirect(array('controller'=>'admins','action' => 'logout'));
		}
                             
        }else {
                 $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
	    }
	    else{
		$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
	    }
        }
	
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * add method
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->User->create();
            if ($this->User->save($this->request->data)) {
                //$this->Session->setFlash(__('The user has been saved'));
                $this->redirect(array('action' => 'index'));
            } else {
                // $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * edit method
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            if ($this->User->save($this->request->data)) {
                // $this->Session->setFlash(__('The user has been saved'));
                $this->redirect(array('action' => 'index'));
            } else {
                // $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
            $this->request->data = $this->User->find('first', $options);
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * delete method
     * @throws NotFoundException
     * @throws MethodNotAllowedException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException(__('Invalid user'));
        }
        $this->request->onlyAllow('post', 'delete');
        if ($this->User->delete()) {
            //$this->Session->setFlash(__('User deleted'));
            $this->redirect(array('action' => 'index'));
        }
        //$this->Session->setFlash(__('User was not deleted'));
        $this->redirect(array('action' => 'index'));
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * admin_index method
     * @return void
     */
    public function admin_index() {
        $this->User->recursive = 0;
        $this->set('users', $this->paginate());
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * admin_view method
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function admin_view($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
        $this->set('user', $this->User->find('first', $options));
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * admin_add method
     * @return void
     */
    public function admin_add() {
        if ($this->request->is('post')) {
            $this->User->create();
            if ($this->User->save($this->request->data)) {
                // $this->Session->setFlash(__('The user has been saved'));
                $this->redirect(array('action' => 'index'));
            } else {
                // $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * admin_edit method
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function admin_edit($id = null) {
        if (!$this->User->exists($id)) {
            throw new NotFoundException(__('Invalid user'));
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            if ($this->User->save($this->request->data)) {
                // $this->Session->setFlash(__('The user has been saved'));
                $this->redirect(array('action' => 'index'));
            } else {
                // $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
            $this->request->data = $this->User->find('first', $options);
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * admin_delete method
     * @throws NotFoundException
     * @throws MethodNotAllowedException
     * @param string $id
     * @return void
     */
    public function admin_delete($id = null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException(__('Invalid user'));
        }
        $this->request->onlyAllow('post', 'delete');
        if ($this->User->delete()) {
            // $this->Session->setFlash(__('User deleted'));
            $this->redirect(array('action' => 'index'));
        }
        //$this->Session->setFlash(__('User was not deleted'));
        $this->redirect(array('action' => 'index'));
    }

    ////////////////////////////////////////////////////////////////////////////////

    /**
     * reset method
     * @throws NotFoundException
     * @throws MethodNotAllowedException
     * @param string $id
     * @return void
     */
    public function reset($url_random = null) {
         //set user type for default view
	$this->set('userType','reset');
    
       //set selected action detail
	$this->set('action_detail', 'FORGOT PASSWORD');

        if (!empty($url_random)) {
            $random_data = $this->ResetPassword->findByRandomNo($url_random);
            if (!empty($random_data)) {
                $RandomUser_id = $random_data['ResetPassword']['user_id'];
                $Random_id = $random_data['ResetPassword']['id'];
                $this->set('Random', $Random_id);
                $this->set('random_data', $random_data);
            }
        }

        //get user email address 
        if (!empty($this->data)) {
            $user_email = $this->data['User']['email'];

            //find email address into users table
            $this->User->recursive = -1;
            $user_data = $this->User->findByEmail($user_email);
            if (!empty($user_data)) {
                $user_id = $user_data['User']['id'];
                $user_Demail = $user_data['User']['email'];
                //generate random number
                $user_random = rand(10000, 999999);

                //saving user id and its random number into reset_password table
                $data = array('ResetPassword' => array(
                        'user_id' => $user_id,
                        'random_no' => $user_random,
                        'created_date' => date("Y-m-d H:i:s")
                        ));
                $save_result = $this->ResetPassword->save($data);

                //send mail to user with encoded number
                if (!empty($save_result)) {
                    $ResetEmail = new CakeEmail();
                    $ResetEmail->from(array('sameer@mailinator.com'));
                    $ResetEmail->to($user_Demail);
                    $ResetEmail->subject('Reset password link from Recruit Young.');
                    $ResetEmail->emailFormat('html');
                    $body = "Hello ,";
                    $body .=" <br/><br/>Click on below link for reset your password";
                    $body .="<br/><a href='http://".$_SERVER['SERVER_NAME']."/users/reset/$user_random'>http://".$_SERVER['SERVER_NAME']."/users/reset/$user_random</a>";
                    $email = $user_Demail;
                    $ResetEmail->send($body);
                    $this->redirect(array('action' => 'login'));
                }
		$this->redirect(array('action' => 'login'));
            } else {
                $this->Session->setFlash(__("Email address not found"));
                $this->redirect(array('action' => 'reset'));
            }
        }
    }

////////////////////////////////////////////////////////////////////////////////

    /**
     * resetpassword method
     * @throws NotFoundException
     * @throws MethodNotAllowedException
     * @param string $id
     * @return void
     */
    public function resetpassword() {
        $this->render(false);
        //change password in users table 
        if (!empty($this->data)) {
            $this->User->id = $this->data['User']['user_id'];
            $this->User->saveField("password", $this->data['User']['password']);

            //delete random number record from reset_passwords table
            $this->ResetPassword->id = $this->data['User']['reset_id'];
            $this->ResetPassword->delete();
            $this->Session->setFlash("Your password successfully reset ");
            $this->redirect(array('action' => 'index'));
        }
    }

////////////////////////////////////////////////////////////////////////////////

function validateUsername()
{
    $un = $_REQUEST['un'];
    $data =  $this->User->getUsername($un);
    //pr($data);
    if(isset($data[0]['users']['id']) AND $data[0]['users']['id'] != '')
    {
        echo "User name already taken please try another user name";
    }
    else
    {
        echo '';
    }
    
}

function validateUseremail()
{
    $email = $_REQUEST['email'];
    $data = $this->User->getUseremail($email);
    if(isset($data[0]['users']['id']) AND $data[0]['users']['id'] != '')
    {
        echo "Email already taken please try another Email";
    }
    else
    {
        echo '';
    }
}

    public function loadata() {
	        $this->layout = "ajax";
        $this->autoRender = false;
        if ($this->request->is('ajax')) {
	if(isset($_POST['loadType']))
	{
	$loadType=$_POST['loadType'];
	}
	if($_POST['loadId'])
	{
	$loadId=$_POST['loadId'];
	}
	if($loadType=="state"){
	$sdata = $this->JobState->getStateByCountry($loadId);
	foreach($sdata as $val_data)
	{
	     $HTML.="<option value='".$val_data['job_state']['id']."'>".$val_data['job_state']['state_name']."</option>";
	}
	}else{
	    $cdata = $this->JobCity->getCityByState($loadId);
	    //pr($cdata);
	    foreach($cdata as $val_cdata)
	{
	   $HTML.="<option value='".$val_cdata['job_city']['city_id']."'>".$val_cdata['job_city']['city_name']."</option>";
	}
	}
	echo $HTML;
	}
	
    }
    
    function upload_resume()
    {
	
	error_reporting(1);
	$array = array();
	if(isset($_POST['upload']))
	{
	    $base_name = "";
	    $target_path_cv = $_SERVER['DOCUMENT_ROOT'].$this->webroot.'app/webroot/uploads/cvs/common/';
	    $target_path = $target_path_cv;
               //die;
	        if( $_FILES['resume']['name']!="" )
                {
                    $base_name = basename( $_FILES['resume']['name'] );
                    $ext = strtolower( end(explode(".",$base_name)) ) ;
                    if( $ext=="doc" || $ext=="docx")
                    {
                            $random = (rand(9999,999999));
                            $target_path = $target_path .$random. basename( $_FILES['resume']['name']); 
                            if( move_uploaded_file($_FILES['resume']['tmp_name'], $target_path) )
                            {
                                    $array['cv_path'] = $random.$base_name;
                            }
                    }
                }
		if(isset($array['cv_path']) AND $array['cv_path'] !='')
		{
		    if(isset($_POST['email']))
		    {
			$array['email_address'] = $_POST['email'];
		    }
			$data['JobCv'] = $array;
			
			$this->JobCv->create();
			$query = $this->JobCv->save($data['JobCv']);
			if(isset($query))
			{
			$this->Session->setFlash(__('You have been successfully uploaded your resume '));
			$this->redirect(array('controller' => 'Home', 'action' => 'index'));
			}
		}
		else
		{
		    $this->Session->setFlash(__('Invalid file format.Please upload CV in word document format only'));
		    $this->redirect(array('controller' => 'Home', 'action' => 'index'));
		}
	}
	
	
    }
    function save_comment()
    {
	error_reporting(0);
	$this->autoRender = false;
	if(isset($_REQUEST))
	{
	    
	    $arr = array();
	    $name = $_REQUEST['name'];
	    $email = $_REQUEST['email'];
	    $msg = $_REQUEST['cmsg'];
	    $userid = $_REQUEST['userid'];
	    $login_userTYPE = $_REQUEST['type'];
	    $comment_type = $_REQUEST['comment_type'];
	    
	   
	    $arr = array(
		'comment_author'=> $name ,
		'comment_author_email'=> $email,
		'comment_content' => $msg,
		'comment_type' => $comment_type,
		'user_id' => $userid,
		'comment_date' => '',
	    );
	    
	    $data['JobComment'] = $arr;
	    $this->JobComment->create();
	    $query = $this->JobComment->save($data['JobComment']);
	   //	 $this->Session->setFlash(__('You have been successfully sumbitted your comment '));
			if($login_userTYPE == 'candidate')
                        {
                            $can_profile = $this->JobJobseeker->find('first', array('conditions' => array('seeker_id' => $userid)));
			    $logo = 'uploads/photos/'.$can_profile['JobJobseeker']['seeker_photo'];
			    //$this->redirect(array('controller' => 'candidate', 'action' => 'candidate_profile'));
                        }
                        elseif($login_userTYPE == 'employer')
                        {
			    $emp_profile = $this->EmployerProfile->find('first', array('conditions' => array('emp_id' => $userid)));
			    $logo = 'uploads/'.$emp_profile['EmployerProfile']['company_logo'];
                            //$this->redirect(array('controller' => 'employer', 'action' => 'profile'));
                        }
			else{
			    $logo = 'css/images/no_photo.jpg';
			}
			
	    $cam_val = $this->JobComment->find('first', array('conditions' => array(
                                        'user_id' => $userid, 'comment_type' => $comment_type
                                        ), 'order' => array('id' => 'DESC')
            ));
            //pr($cam_val); exit;
	    
	    echo '<div class="view-commant-main">
	      <div class="col-md-2"><img src="'.$this->webroot.''.$logo.'" alt=""/></div>
	      <div class="col-md-10 pull-right view-dec"><h2>'.$cam_val['JobComment']['comment_author'].'</h2>
		      <div class="hours">'. date('d-m-Y',strtotime($cam_val['JobComment']['comment_date'])) .'</div>
		      <p>'. $cam_val['JobComment']['comment_content'].'</p></div></div>';
	}
    }

}
